# -*- mode: ruby -*-
# vi: set ft=ruby :
# This Vagrant file is complete development environment
#
#
#
#


Vagrant.configure(2) do |config|

  # EMPTY PROVISIONING
  config.vm.provision "shell", inline: <<-SHELL
    echo "Hello world! Starting deploy procedures."

    sudo apt-get install -qy apt-transport-https
    sudo apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
    sudo bash -c "echo 'deb https://apt.dockerproject.org/repo debian-jessie main' > /etc/apt/sources.list.d/docker.list"
    sudo apt-get update
    sudo apt-get install -qy docker-engine
    sudo service docker start
    sudo bash -c "curl -L https://github.com/docker/compose/releases/download/1.5.0rc1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose"
    sudo chmod +x /usr/local/bin/docker-compose
  SHELL

  config.vm.network "private_network", ip: "192.168.33.50"

  config.vm.define "mom" do |mom|
    mom.vm.box = "mom"
    mom.vm.box = "debian/jessie64"

    #mom.vm.network "public_network", ip: "192.168.33.50"

    mom.vm.provider "virtualbox" do |vb|
      vb.gui = false
      vb.memory = "2048"
      vb.cpus = 2
    end
    # Gitlab local
    # Jenkins local
    # Docker compose
    mom.vm.provision "shell", inline: <<-SHELL
      echo "Mom started"
      # get container, build and run
      sudo docker run --name myjenkins -d -p 8080:8080 -p 50000:50000 -v /var/jenkins_home jenkins
      # add container to autostart
      # sudo docker start myjenkins
    SHELL

  end

  #config.vm.define "son" do |son|
  #  son.vm.box = "son"
  #  son.vm.box = "debian/jessie64"

    #son.vm.network "private_network", ip: "192.168.168.2"

  #  config.vm.provider "virtualbox" do |vb|
  #    vb.gui = false
  #    vb.memory = "1024"
  #    vb.cpus = 1
  #  end
  #  son.vm.provision "shell", inline: <<-SHELL
  #    echo "Son started"
  #  SHELL

  #end

end
